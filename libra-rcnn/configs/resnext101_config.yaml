# Builtin Configurations(DO NOT CHANGE THESE CONFIGURATIONS unless you know exactly what you are doing)
enable_modelarts: 0
data_url: ""
train_url: "/cache/data/libra_rcnn_models"
checkpoint_url: ""
data_path: "/cache/data"
output_path: "/cache/train"
load_path: "/cache/checkpoint_path"
enable_profiling: 0

train_outputs: '/data/libra_rcnn_models'
brief: 'gpu-1_1024x1024'
device_target: GPU
# ==============================================================================
# backbone
backbone:
  type: "resnext"
  depth: 101
  pretrained: ''
  frozen_stages: 1
  norm_eval: True
  num_stages: 4
  out_indices: [0, 1, 2, 3]
  groups: 64                                      # resnext
  base_width: 4                                   # resnext

# neck
neck:
  fpn:
    in_channels: [256, 512, 1024, 2048]
    out_channels: 256
    num_outs: 5
  bfp:
    in_channels: 256
    num_levels: 5
    refine_level: 2
    refine_type: 'non_local'

# rpn
rpn:
  in_channels: 256
  feat_channels: 256
  cls_out_channels: 1
  target_means: [0., 0., 0., 0.]
  target_stds: [1.0, 1.0, 1.0, 1.0]
  cls_loss:
    weight: 1.0
  reg_loss:
    weight: 1.0
  bbox_assign_sampler:
    neg_iou_thr: 0.3
    pos_iou_thr: 0.7
    min_pos_iou: 0.3
    num_expected_neg: 256
    num_expected_pos: 128
    neg_pos_ub: 5
    match_low_quality: True

# anchor
anchor_generator:
  scales: [8]
  ratios: [0.5, 1.0, 2.0]
  strides: [4, 8, 16, 32, 64]

# proposal
proposal:
  activate_num_classes: 2
  use_sigmoid_cls: True
  train:
    nms_pre: 2000
    max_num: 1000
    nms_thr: 0.7
    min_bbox_size: 0
  test:
    nms_pre: 1000
    max_num: 1000
    nms_thr: 0.7
    min_bbox_size: 0

rcnn:
  in_channels: 256
  fc_out_channels: 1024
  roi_feat_size: 7
  bbox_coder:
    target_means: [0.0, 0.0, 0.0, 0.0]
    target_stds: [0.1, 0.1, 0.2, 0.2]
  cls_loss:
    weight: 1.0
  reg_loss:
    alpha: 0.5
    gamma: 1.5
    beta: 1.0
    weight: 1.0
  assign_sampler:
    neg_iou_thr: 0.5
    pos_iou_thr: 0.5
    min_pos_iou: 0.5
    num_bboxes: 1000
    num_expected_pos: 128
    num_expected_neg: 512
    floor_thr: -1
    floor_fraction: 0
    num_bins: 3
    neg_pos_ub: -1
    match_low_quality: False
  score_thr: 0.05           # bounding box computation
  iou_thr: 0.5

# roi_align
roi:
  roi_layer: {type: 'RoIAlign', out_size: 7, sampling_ratio: 0}
  out_channels: 256
  featmap_strides: [4, 8, 16, 32]
  finest_scale: 56
  sample_num: 640

# optimizer
opt_type: "sgd"
lr: 0.02
min_lr: 0.0
momentum: 0.9
weight_decay: 0.0001
warmup_step: 500
warmup_ratio: 0.001
lr_steps: [8, 11]
lr_type: "multistep"
grad_clip: 0


# train
num_gts: 100
batch_size: 4
test_batch_size: 1
loss_scale: 256
epoch_size: 12
run_eval: 1
eval_every: 1
enable_graph_kernel: 0
finetune: 0
datasink: 0
pre_trained: ''

#distribution training
run_distribute: 0
device_id: 0
device_num: 1
rank_id: 0

# Number of threads used to process the dataset in parallel
num_parallel_workers: 6
# Parallelize Python operations with multiple worker processes
python_multiprocessing: 0

# dataset setting
train_data_type: 'coco'
val_data_type: 'mindrecord'
train_dataset: '/data/coco-2017/train'
val_dataset: '/data/mindrecord_eval'
coco_classes: ['background', 'person', 'bicycle', 'car', 'motorcycle',
               'airplane', 'bus', 'train', 'truck', 'boat', 'traffic light',
               'fire hydrant', 'stop sign', 'parking meter', 'bench', 'bird',
               'cat', 'dog', 'horse', 'sheep', 'cow', 'elephant', 'bear',
               'zebra', 'giraffe', 'backpack', 'umbrella', 'handbag', 'tie',
               'suitcase', 'frisbee', 'skis', 'snowboard', 'sports ball',
               'kite', 'baseball bat', 'baseball glove', 'skateboard',
               'surfboard', 'tennis racket', 'bottle', 'wine glass', 'cup',
               'fork', 'knife', 'spoon', 'bowl', 'banana', 'apple',
               'sandwich', 'orange', 'broccoli', 'carrot', 'hot dog', 'pizza',
               'donut', 'cake', 'chair', 'couch', 'potted plant', 'bed',
               'dining table', 'toilet', 'tv', 'laptop', 'mouse', 'remote',
               'keyboard', 'cell phone', 'microwave', 'oven', 'toaster',
               'sink', 'refrigerator', 'book', 'clock', 'vase', 'scissors',
               'teddy bear', 'hair drier', 'toothbrush']
num_classes: 81
train_dataset_num: 0
train_dataset_divider: 0

# images
img_width: 1024
img_height: 1024
divider: 64
img_mean: [123.675, 116.28, 103.53]
img_std: [58.395, 57.12, 57.375]
to_rgb: 1
keep_ratio: 1

# augmentation
flip_ratio: 0.5
expand_ratio: 0.0

# callbacks
save_every: 100
keep_checkpoint_max: 5
keep_best_checkpoints_max: 5

---
# Config description for each option
enable_modelarts: 'Whether training on modelarts, default: False'

device_target: "device where the code will be implemented, default is GPU."
train_outputs: "Path for folder with experiments."
brief: "Short experiment name, experiment folder will arrive in `train_outputs` folder. `brief` will suffix of experiment folder name."
img_width: "Input images weight."
img_height: "Input images height."

lr: "Base learning rate value."
batch_size: "Training batch size."
pre_trained: "Path to pretraining model (resume training or train new fine tuned model)."

---
train_data_type: ["coco", "mindrecord"]
val_data_type: ["coco", "mindrecord"]
device_target: ["GPU"]
backbone_type: ["resnet", "resnext"]
